[user]
	name = Jay
	email = contact@jnair.me

[core]
        editor = nvim
        excludesfile = ~/.gitignore_global
[alias]
        hist = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        co = checkout
        a = add . -A
        cm = commit -m
        d = diff
        rb = rebase
        b = branch
        sw = switch
        pl = pull
        ps = push
        h = !git --no-pager log --abbrev-commit --pretty=oneline --max-count=10
        br = branch
        bl=log --remotes=origin --graph --decorate --oneline --simplify-by-decoration
        who=shortlog -sn --
        pickaxe=log -p -S --debug
        brp = !git branch --merged main | grep -vE '^\\*? *(main)$'
        # Difftastic aliases, so `git dlog` is `git log` with difftastic and so on.
        dlog = -c diff.external=difft log --ext-diff
        dshow = -c diff.external=difft show --ext-diff
        ddiff = -c diff.external=difft diff

        difft = -c diff.external=difft diff
	prdiff = "!f() { git difft ${1:-origin/main}...HEAD; }; f"
[column]
        ui = auto
[branch]
        sort = -committerdate
[tag]
        sort = version:refname
[init]
        defaultBranch = main
[diff]
        algorithm = histogram
        colorMoved = plain
        mnemonicPrefix = true
        renames = true
	tool = difft 
[push]
        default = simple
        autoSetupRemote = true
        followTags = true
[fetch]
        prune = true
        pruneTags = true
        all = true
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[pull]
	rebase = false
[help]
        autocorrect = prompt
[commit]
        verbose = true
[rerere]
        enabled = true
        autoupdate = true
[rebase]
        autoSquash = true
        autoStash = true
        updateRefs = true
[merge]
        conflictstyle = zdiff3 

# Other aliases 
# la=!git config -l | grep alias | cut -c 7-
# list-alias=!git la
# rv=checkout --
# revert=checkout --
# fp=push --force
# force-push=push -- force
# um=!sh -c 'git checkout master && git fetch origin && git pull origin master'
# branch-log=!git bl
# mywork=!sh -c 'git log --since ""$1" day ago" --oneline --author "Maarten Heremans"' -
# worklog=!sh -c 'git log --since ""$1" day ago" --oneline --author "$2"' -
# pb=!git show-branch | ack '\*' | ack -v "`git rev-parse --abbrev-ref HEAD`" | head -n1 | sed 
# 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
# parent-branch=!git pb
# feature=!f() { git checkout -b feature/$1; }; f
# hotfix=!f() { git checkout -b hotfix/$1; }; f
# bugfix=!f() { git checkout -b bugfix/$1; }; f
# test=!f() { git checkout -b test/$1; }; f
# ls=log --pretty=format:"%C(yellow)%h%Cred%d\ %Creset%s%Cblue\ [%cn]" --decorate
# log-short=!git ls
# ll=log --pretty=format:"%C(yellow)%h%Cred%d\ %Creset%s%Cblue\ [%cn]" --decorate --numstat
# log-files=!git ll
# lds=log --pretty=format:"%C(yellow)%h\ %ad%Cred%d\ %Creset%s%Cblue\ [%cn]" --decorate --date=short
# log-date=!git lds
# ld=log --pretty=format:"%C(yellow)%h\ %ad%Cred%d\ %Creset%s%Cblue\ [%cn]" --decorate 
# --date=relative
# log-reldate=!git ld
# le=log --oneline --decorate
# file-log=log -u
# lc=!f() { git ll $1^..$1; }; f
# log-changed=!git lc
# diffr=!f() { git diff $1^..$1; }; f
# ds=diff --staged
# diff-staged=diff --staged
# dm=diff --stat master
# diff-master=diff --stat master
# f=!git ls-files | grep -i
# find-file=!git f
# find-string=grep -Ii --break --heading -n08:36
# so=remote -v show origin
# show-origin=!git so
# prune-all=!git remote | xargs -n 1 git remote prune
# whois=!sh -c 'git log -i -l --pretty="format:%an <%ae>
# unpushed=log --branches --not --remotes --color --graph --pretty=format:'%Cred%h%Creset 
# -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit
# fullfetch=fetch  --all --prune --tags --recurse-submodules --progress
# incoming=!(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an 
# %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..$(git rev-parse -abbrev-ref 
# -symbolic-full-name @{u}))
# outgoing=!(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an 
# %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' $(git rev-parse -abbrev-ref 
# -symbolic-full-name @{u})..)))'"
